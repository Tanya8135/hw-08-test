{"version":3,"file":"static/js/186.bee0f3bc.chunk.js","mappings":"6RASMA,EAAcC,EAAAA,YAAiB,SAAqBC,EAAOC,GAC/D,IAAQC,EAAoBF,EAApBE,MAAUC,GAAlB,OAA4BH,EAA5B,GACA,OACE,SAACI,EAAAC,GAAD,gBACEH,OAAK,QACHI,KAAMC,EACNC,MAAOC,GACJP,IAEDC,GANN,IAOEF,IAAKA,IAGV,IAec,SAASS,IACtB,IAQqBC,EARrB,EAA4BZ,EAAAA,SAAe,CACzCa,OAAQ,GACRC,SAAU,GACVC,OAAQ,GACRC,YAAa,GACbC,cAAc,IALhB,eAAOC,EAAP,KAAeC,EAAf,KAuBA,OACE,SAACC,EAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTC,cAAe,CAAEC,GAAI,SAAUC,GAAI,OACnCC,IAAK,GAJT,UAWE,SAAC3B,EAAD,CACE4B,GAAG,8BACHC,KAAMV,EAAOD,aAAe,OAAS,WACrCY,MAAOX,EAAOJ,SACdgB,UA/BelB,EA+BQ,WA/BA,SAAAmB,GAC3BZ,GAAU,kBAAKD,GAAN,cAAeN,EAAOmB,EAAMC,OAAOH,QAC7C,GA8BKI,KAAK,WACLC,cACE,SAACC,EAAD,WACE,SAACC,EAAD,CACE,aAAW,6BACXC,QAjCoB,WAC9BlB,GAAU,kBACLD,GADI,IAEPD,cAAeC,EAAOD,eAEzB,EA6BWqB,YA3BoB,SAAAP,GAC9BA,EAAMQ,gBACP,EAsBS,SAKGrB,EAAOD,cAAe,SAACuB,EAAA,EAAD,KAAwB,SAACC,EAAA,EAAD,WAO5D,CAED,IAAMC,EAGC,UAKDC,EAIC,UAJDA,EAMC,UANDA,EAQC,UARDA,EAUC,UAGDnC,GAAkBoC,EAAAA,EAAAA,GAAO,MAAPA,EACtB,gBAAGC,EAAH,EAAGA,MAAH,wIAKqC,SAAvBA,EAAMC,QAAQC,KAAkBJ,EAAY,OAL1D,yHAakBD,EAblB,0EAuBIhC,GAAqBkC,EAAAA,EAAAA,GAAO,QAAPA,EACzB,gBAAGC,EAAH,EAAGA,MAAH,0IAMmC,SAAvBA,EAAMC,QAAQC,KAAkBJ,EAAYA,EANxD,2GAeIP,GAAaQ,EAAAA,EAAAA,GAAOI,EAAAA,EAAPJ,EACjB,gBAAGC,EAAH,EAAGA,MAAH,wKAOgC,SAAvBA,EAAMC,QAAQC,KAAkBJ,EAAYA,EAPrD,uGAWWA,EAXX,iBAgBIR,GAAiBS,EAAAA,EAAAA,GAAO,MAAPA,CAAH,oH,gHC5KpB,GAAgB,IAAM,wB,SC0CtB,EApCkB,WAChB,IAAMK,GAAWC,EAAAA,EAAAA,MAgBjB,OACE,kBAAMC,UAAWC,EAAAA,KAAUC,SAfR,SAAAC,GACnBA,EAAEf,iBAEF,IAAMgB,EAAOD,EAAEE,cACfP,GACEQ,EAAAA,EAAAA,IAAM,CACJC,MAAOH,EAAKI,SAASD,MAAM7B,MAC3Bf,SAAUyC,EAAKI,SAAS7C,SAASe,SAIrC0B,EAAKK,OACN,EAGoDC,aAAa,MAAhE,WACE,mBAAOV,UAAWC,EAAAA,MAAlB,WACE,uBAAG,WACH,kBAAOxB,KAAK,QAAQK,KAAK,cAE3B,mBAAOkB,UAAWC,EAAAA,MAAlB,WACE,uBAAG,cACH,SAAC,IAAD,WACE,kBAAOxB,KAAK,WAAWK,KAAK,WAAWkB,UAAWC,EAAAA,IAASU,UAAQ,UAGvE,mBAAQlC,KAAK,SAASuB,UAAWC,EAAAA,IAAjC,SAA0C,aAK/C,ECtCc,SAASW,IACpB,OACI,4BACI,SAACC,EAAA,EAAD,WACI,2BAAO,aAEX,SAAC,EAAD,MAGX,C","sources":["components/InputLibStyle/InputLibStyle.jsx","webpack://hw-08-test/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.jsx","pages/Login.js"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@mui/material/Box';\nimport { Button } from '@mui/base/Button';\nimport { Input } from '@mui/base/Input';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport { styled } from '@mui/system';\n\nconst CustomInput = React.forwardRef(function CustomInput(props, ref) {\n  const { slots, ...other } = props;\n  return (\n    <Input\n      slots={{\n        root: StyledInputRoot,\n        input: StyledInputElement,\n        ...slots,\n      }}\n      {...other}\n      ref={ref}\n    />\n  );\n});\n\nCustomInput.propTypes = {\n  /**\n   * The components used for each slot inside the InputBase.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    input: PropTypes.elementType,\n    root: PropTypes.elementType,\n    textarea: PropTypes.elementType,\n  }),\n};\n\nexport default function InputAdornments() {\n  const [values, setValues] = React.useState({\n    amount: '',\n    password: '',\n    weight: '',\n    weightRange: '',\n    showPassword: false,\n  });\n\n  const handleChange = prop => event => {\n    setValues({ ...values, [prop]: event.target.value });\n  };\n\n  const handleClickShowPassword = () => {\n    setValues({\n      ...values,\n      showPassword: !values.showPassword,\n    });\n  };\n\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: { xs: 'column', sm: 'row' },\n        gap: 2,\n      }}\n    >\n      {/* <CustomInput\n        id=\"outlined-start-adornment\"\n        startAdornment={<InputAdornment>kg</InputAdornment>}\n      /> */}\n      <CustomInput\n        id=\"outlined-adornment-password\"\n        type={values.showPassword ? 'text' : 'password'}\n        value={values.password}\n        onChange={handleChange('password')}\n        name=\"password\"\n        endAdornment={\n          <InputAdornment>\n            <IconButton\n              aria-label=\"toggle password visibility\"\n              onClick={handleClickShowPassword}\n              onMouseDown={handleMouseDownPassword}\n            >\n              {values.showPassword ? <VisibilityOffIcon /> : <VisibilityIcon />}\n            </IconButton>\n          </InputAdornment>\n        }\n      />\n    </Box>\n  );\n}\n\nconst blue = {\n  100: '#DAECFF',\n  200: '#80BFFF',\n  400: '#3399FF',\n  500: '#007FFF',\n  600: '#0072E5',\n};\n\nconst grey = {\n  50: '#F3F6F9',\n  100: '#E7EBF0',\n  200: '#E0E3E7',\n  300: '#CDD2D7',\n  400: '#B2BAC2',\n  500: '#A0AAB4',\n  600: '#6F7E8C',\n  700: '#3E5060',\n  800: '#2D3843',\n  900: '#1A2027',\n};\n\nconst StyledInputRoot = styled('div')(\n  ({ theme }) => `\n  font-family: IBM Plex Sans, sans-serif;\n  font-weight: 400;\n  height: 37px;\n  border-radius: 8px;\n  background: ${theme.palette.mode === 'dark' ? grey[900] : '#fff'};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n\n\n  &:hover {\n    border-color: ${blue[400]};\n  }\n\n  // firefox\n  &:focus-visible {\n    outline: 0;\n  }\n`\n);\n\nconst StyledInputElement = styled('input')(\n  ({ theme }) => `\n  font-size: 0.875rem;\n  font-family: inherit;\n  font-weight: 400;\n  line-height: 1.5;\n  flex-grow: 1;\n//   color: ${theme.palette.mode === 'dark' ? grey[300] : grey[900]};\n  background: inherit;\n  border: none;\n  border-radius: inherit;\n  outline: 0;\n  margin: 0;\n`\n);\n\nconst IconButton = styled(Button)(\n  ({ theme }) => `\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  border: none;\n//   background: inherit;\n  cursor: pointer;\n  color: ${theme.palette.mode === 'dark' ? grey[300] : grey[700]};\n  transition: color 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  \n  &:hover {\n    color: ${grey[500]};\n  }\n  `\n);\n\nconst InputAdornment = styled('div')`\n  margin: 8px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n`;\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"LoginForm_btn__B2KLK\"};","import { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\n\nimport InputAdornments from 'components/InputLibStyle';\n\nimport css from './LoginForm.module.css';\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const form = e.currentTarget;\n    dispatch(\n      logIn({\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n\n    form.reset();\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit} autoComplete=\"off\">\n      <label className={css.label}>\n        <p>Email</p>\n        <input type=\"email\" name=\"email\" />\n      </label>\n      <label className={css.label}>\n        <p>Password</p>\n        <InputAdornments>\n          <input type=\"password\" name=\"password\" className={css.int} required />\n        </InputAdornments>\n      </label>\n      <button type=\"submit\" className={css.btn}>\n        Log In\n      </button>\n    </form>\n  );\n};\n\nexport default LoginForm;\n","import { Helmet } from \"react-helmet\";\nimport LoginForm from \"components/LoginForm/LoginForm\";\n\nexport default function Login() {\n    return (\n        <div>\n            <Helmet>\n                <title>Login</title>\n            </Helmet>\n            <LoginForm />\n        </div>\n    )\n}"],"names":["CustomInput","React","props","ref","slots","other","Input","I","root","StyledInputRoot","input","StyledInputElement","InputAdornments","prop","amount","password","weight","weightRange","showPassword","values","setValues","Box","sx","display","flexDirection","xs","sm","gap","id","type","value","onChange","event","target","name","endAdornment","InputAdornment","IconButton","onClick","onMouseDown","preventDefault","VisibilityOff","Visibility","blue","grey","styled","theme","palette","mode","Button","dispatch","useDispatch","className","css","onSubmit","e","form","currentTarget","logIn","email","elements","reset","autoComplete","required","Login","Helmet"],"sourceRoot":""}